package com.kunal.strings;

import java.util.ArrayList;

public class Permutations {
    public static void main(String[] args) {
//        permutations("", "abc");

//        ArrayList<String> ans = permutationsList("", "abc");
//        System.out.println(ans);

        System.out.println(permutationsCount("", "abcd"));
    }

    static void permutations(String p, String up) {
        if (up.isEmpty()) {
            System.out.println(p);
            return;
        }
        char ch = up.charAt(0);
        for (int i = 0; i <= p.length(); i++) {
            String f = p.substring(0, i);
            String s = p.substring(i, p.length());
            permutations(f + ch + s, up.substring(1));
        }
    }

    static ArrayList<String> permutationsList(String p, String up) {
        if (up.isEmpty()) {
            ArrayList<String> list = new ArrayList<>();
            list.add(p);
            return list;
        }
        char ch = up.charAt(0);

        // local to this call
        ArrayList<String> ans = new ArrayList<>();

        for (int i = 0; i <= p.length(); i++) {
            String f = p.substring(0, i);
            String s = p.substring(i, p.length());
            ans.addAll(permutationsList(f + ch + s, up.substring(1)));
        }
        return ans;
    }

    static int permutationsCount(String p, String up) {
        if (up.isEmpty()) {
            return 1;
        }
        int count = 0;
        char ch = up.charAt(0);
        for (int i = 0; i <= p.length(); i++) {
            String f = p.substring(0, i);
            String s = p.substring(i, p.length());
            count = count + permutationsCount(f + ch + s, up.substring(1));
        }
        return count;
    }

}
/*class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<int> desp;
         vector<vector<int>> ans;
     perm(desp, nums,ans);
       return ans;
    }
    void  perm(vector<int>& desp, vector<int>& nums,   vector<vector<int>>& ans){
        if(nums.empty()){
             ans.push_back(desp);
             return ;
        }
        
        for(int i=0;i<=desp.size();i++){
           vector<int> newDesp(desp);  // Make a copy to avoid affecting the original desp
            newDesp.insert(newDesp.begin() + i, nums.front());
            vector<int> newNums(nums.begin() + 1, nums.end());  // Exclude the first element
            perm(newDesp, newNums, ans);
        }
        }
        
        
    
};*/
